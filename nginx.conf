# NGINX Configuration for CaptechApplication Backend
# Generated by Gemini

# Upstream server for the Node.js application
# This makes it easy to manage the backend address
upstream node_backend {
    server 127.0.0.1:5000;
}

# Server block to redirect all HTTP traffic to HTTPS
server {
    listen 80;
    server_name localhost;
    # Return a permanent redirect to the HTTPS version of the URL
    return 301 https://$host$request_uri;
}

# Main server block for handling HTTPS traffic
server {
    listen 443 ssl http2;
    server_name localhost;

    # --- SSL Configuration ---
    # IMPORTANT: Replace these paths with the actual absolute paths to your SSL certificate and key.
    # These are placeholders from your example.
    ssl_certificate /home/yourusername/certs/cert.pem;
    ssl_certificate_key /home/yourusername/certs/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;

    # --- Security Headers ---
    # Enforce HTTPS for 2 years
    add_header Strict-Transport-Security "max-age=63072000" always;
    # Prevent content type sniffing
    add_header X-Content-Type-Options "nosniff" always;


    # --- Location Blocks ---

    # 1. API Traffic to the Node.js Backend
    # All requests starting with /api/ will be forwarded.
    location /api/ {
        proxy_pass http://node_backend;

        # Set headers to pass information to the backend application
        # This is crucial for `app.set('trust proxy', true)` in Express
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS Headers for local development (especially with a separate frontend)
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
    }

    # 2. Static Assets (CSS, Client-side JS)
    # Served directly by Nginx for high performance.
    # Maps URL path /static/ to the /src/public/ directory.
    location /static/ {
        # IMPORTANT: This is the absolute path to your static files directory.
        alias /home/timothy/codingprojects/CaptechApplication/backendV1.0.1/src/public/;

        # Cache static assets aggressively in the browser
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off; # Don't log access to static files
    }

    # 3. User Uploads
    # Provides access to the /uploads/ directory.
    # Maps URL path /uploads/ to the /uploads/ directory at the project root.
    location /uploads/ {
        # IMPORTANT: This is the absolute path to your uploads directory.
        alias /home/timothy/codingprojects/CaptechApplication/backendV1.0.1/uploads/;
        access_log off;
    }

    # 4. Health Check Endpoint
    # Responds directly without hitting the Node.js application.
    location = /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }

    # 5. Root Location Catch-all
    # If a request doesn't match any of the above locations, return 404.
    # This prevents unintended requests from hitting the Node.js backend.
    location / {
        return 404;
    }
}